---
title: "Module 3 | Exploratory Data Analysis and Tables"
author: "A. Peralta-Santos"
date: today
date-format: long
format:
  html:
    preview: false
    smooth-scroll: true
    embed-resources: true
    toc: true
    toc-location: left
    number-sections: true
    number-depth: 3
    code_download: true
    code-copy: true
execute:
  warning: false
  collapse: true
  message: false
  eval: true
  echo: true
title-block-style: default
editor: 
  markdown: 
    wrap: 72
---

# SETUP

### Limpar o ambiente

```{r}
rm(list = ls(all.names = TRUE)) 
# limpa todos os objetos, incluindo os ocultos
# boa política se houver objetos antigos não relevantes
# melhoria da performance
```

### Instalar e carregar bibliotecas

Sempre que se inicia uma nova sessão, as bibliotecas têm de ser carregadas.

```{r}
# Forma alternativa de instalar vários pacotes e carregá-los

# SOURCE: https://cedricscherer.netlify.app/2019/05/17/the-evolution-of-a-ggplot-ep
# Packages
required_packages <- c("janitor",
                       "tidyverse",
                       "rio",
                       "data.table",
                       "lubridate",
                       "ggplot2",
                       "gt",
                       "skimr",
                       "DataExplorer"
                       )      

for (pkg in required_packages) {
  # install packages if not already present
  if (!pkg %in% rownames(installed.packages())) {
    install.packages(pkg)
  }
  
  # load packages to this current session 
  library(pkg, character.only = TRUE)
}
remove(required_packages)
remove(pkg)

```

# IMPORTAÇÃO de Dados e DATA CLEANING and WRANGLING 

Para esta parte da aula não será tão importante alguns passos de data cleaning e data wrangling.

## Carregar e Limpar os dados

Continuamos a trabalhar os dados hospitalares.

```{r}

inpatient_hospital <- import("datasets/atividade_internamento_hospitalar.xlsx") |> 
  clean_names()

inpatient_hospital_lite2 <- inpatient_hospital |> 
  select(
    periodo, 
    instituicao, 
    tipo_de_especialidade,
    doentes_saidos,
    dias_de_internamento
  ) |>
  mutate(
    length_patient =
      round((dias_de_internamento/doentes_saidos), digits = 1),
    new_var = 2,
    fonte = "transparencia_sns",
    multiplicacao = dias_de_internamento*doentes_saidos,
    periodo=paste0(periodo, "-01"),
    periodo=as.Date(periodo, format = "%Y-%m-%d"),
    year = year(periodo),
    month=lubridate::month(periodo, label = FALSE),
    week=week(periodo),
    weekday=lubridate::wday(periodo, label=TRUE),
    tipo_instituicao = 
        case_when(
          grepl("Universitário", instituicao, ignore.case = TRUE) ~ "University",
          grepl("Oncologia", instituicao, ignore.case = TRUE) ~ "Cancer hospital"
        ),
    tipo_instituicao = 
      replace_na(tipo_instituicao, "Hospital")
    )

inpatient_hospital_surgery_less_500 <- inpatient_hospital_lite |>
  filter(tipo_de_especialidade=="Especialidade Cirurgica" & 
           dias_de_internamento<=500)

covid_inc <- import("datasets/covid_inc.csv")|> 
  clean_names()

hypoxia <- import("datasets/hypoxia.xlsx")|> 
  clean_names()

```

# EXPLORATORY DATA ANALYSIS

O passo da Exploração dos Dados (EDA em inglês), por si, não é um processo formal com regras de execução.

> “There are no routine statistical questions, only questionable statistical routines.” — Sir David Cox

É um processo de exploração da curiosidade despoletado pelos dados que temos à nossa frente.

É um passo necessário na investigação da qualidade dos dados.

É um processo iterativo no qual:

1. Geramos questões sobre os dados;
2. Procuramos responder às questões que temos através de simples:
- Visualizações
- Transformações
- Modelação
3. Assimilamos o que aprendemos e refinamos/geramos novas questões

## FORMULAR QUESTÕES

Pré-requisitos:

- Conhecer os dados que temos
- Se não conhecemos, ver os metadados
- Começar uma análise já com questões com resposta nos dados que temos
- Colocar hipóteses, garante que expomos os nossos presupostos na análise
- Colocar múltiplas questões é melhor que uma questão

## VER OS CONTEÚDOS

Estas primeiras funções não dirão muito mas permitem ter uma melhor compreensão ds dados que temos á frente.

Números de linhas
```{r}
nrow(inpatient_hospital)
```

Temos `r nrow(inpatient_hospital)` observações.

Número de Colunas

```{r}
ncol(inpatient_hospital)
```
Temos `r ncol(inpatient_hospital)` observações.

```{r}
# esta função resume as duas questões anteriores
dim(inpatient_hospital)
```
Para além do número de registos, podemos querer saber o nome e o tipo de variável importados.

Nome das colunas
```{r}

colnames(inpatient_hospital)

length(inpatient_hospital)
```
Nos dados originais temos 7 variáveis:
- periodo
- regiao
- instituicao
- tipo de especialidade
- localização geográfica
- dias de internamento
- doentes saidos

Tipo de Variável

```{r}

str(inpatient_hospital)

```

Com os dados do str sabemos que:

Temos 4 variáveis nominais:

- periodo
- regiao
- instituicao
- localização geográfica
- tipo de especialidade

Temos duas variáveis numéricas:

- doentes saidos
- dias de internamentos

Embora as variáveis numéricas façam sentido, nas nominais podemos querer alterar algumas coisas:

- Mudar periodo para data
- Mudar a regiao, instituicao e tipo de especialidade para fatores para análises estatísticas subsequentes
- Para já não temos questões relativas à localização geográfica, por isso podemos remover esta variável

```{r}
inpatient_hospital_lite <- inpatient_hospital |> 
  select(
    -localizacao_geografica # remover localização
  ) |>
  mutate(
    periodo=paste0(periodo, "-01"), # modificar periodo para que possa ser lido como data
    periodo=as.Date(periodo, format = "%Y-%m-%d"), #informar que periodo é data
    regiao= as_factor(regiao), # existe uma função para fatores ordinais que é ordered() mas que neste caso não é útil
    instituicao= as_factor(instituicao),
    tipo_de_especialidade=as_factor(tipo_de_especialidade))
```

Vamos confirmar as alterações com o str

```{r}

str(inpatient_hospital_lite)

```
Agora já temos um melhor conhecimento sobre os dados:

- Uma variável de Data
- 3 variáveis são fatores
  - Regiao com 5 valores possíveis
  - Intituicão com 51 valores possíveis
  - Tipo de especialidade com 2 valores posssíveis

## PREVISUALIZAR OS DADOS

Uma boa prática numa primeira fase é visualizar pequenas porções dos dados para ver possíveis problemas imediatamente.

### Função HEAD() e TAIL()

Estas funções expõe n linhas dos dados. 

Por default, são 5 linhas

```{r}

head(inpatient_hospital_lite)

```
```{r}

tail(inpatient_hospital_lite)

```
Pelos dados do Head e do Tail verificamos que os dados:

- Estão orientados de forma ascendente pelo período
- Parecem ir das Especialidade Cirúrgicas para as Médicas
- Os valores da variável dias de internamento parecem ser maiores 

### GT (preview)

Um dos maiores pacotes para geração de tabelas permite de forma simples fazer o mesmo que as funções head e tail numa tabela.

```{r}

inpatient_hospital_lite |> 
  gt_preview(top_n=5, bottom_n = 5)

```

### Summary

A função mais conhecia para a estatística descritiva no R, é o summary(), que dá a amplitude dos dados, a média e mediana dos dados, porém não mede o tamanho amostral total, o tipo de distribição nem disperção dos dados. 

```{r}

summary(inpatient_hospital_lite)

```

Com mais esta função aprofundamos mais o nosso conhecimento dos dados:

- A data vai de janeiro de 2015 a janeiro de 2022 e parece ser mensal que o ponto médio é julho de 2018
- Existem mais registos de LVT e Norte (possivel razão?)
- Parecem haver 170 registos por hospital
- Existem mais registos de Especialidades Médicas do que de Cirúrgicas
- Os doentes saídos têm 2 valores em falta
- As distribuições das variáveis dos doentes saidos e dos dias de internamento têm uma variabilidade

### Ver os números por hospital

```{r}

inp_hosp_lite_count <- inpatient_hospital_lite |> 
  summarise(
            count= n(),
            total_patients= sum(doentes_saidos, na.rm = TRUE),
            mean_patients = mean(doentes_saidos, na.rm = TRUE),
            sd_patients = sd(doentes_saidos, na.rm = TRUE),
            median_patients = median(doentes_saidos, na.rm = TRUE), 
            iqr_patients = IQR(doentes_saidos, na.rm = TRUE),
  .by = instituicao) |> 
   arrange(count)

inp_hosp_lite_count
```
Quais são algumas considerações que podemos fazer sobre estes dados?


## VARIATION

A variação é a tendência dos dados variarem por medições consecutivas ou por sujeitos ou tempos.

Vamos explorar questões iniciais:

- Qual é a variação de doentes saídos por hospital
- Qual a diferença da distribuição de dados entre 2015 e 2022
- Qual é a variação dos dados por Tipo de Especialidade.

Como a variável doentes de doentes saidos é numérica podemos explorar a sua distribuição através do uso de histogramas.
Em módulos futuros iremos explorar como fazer código e como melhorar gráficos apresentados.

O objetivo desta fase é explorar os valores mais típicos e procurar valores inesperados. 

Perguntas desta fase podem ser:

- Quais são os valores mais comuns? Razões para isso?
- Quais valores são mais raros? Porquê serão? 
- É possível observar algum padrão incomum?

Qual é a variação de doentes saídos por hospital

```{r}

p1 <- inpatient_hospital_lite |> 
  ggplot(aes(x=doentes_saidos))+
    geom_histogram(binwidth = 500)#isto cria um histograma com intervalos de 500 doentes
  
p1
```
Qual a diferença da distribuição de dados entre 2015 e 2022

```{r}


p1 <- ggplot()+
    geom_histogram(data=inpatient_hospital_lite |> filter(periodo<"2016-01-01"),aes(x=doentes_saidos), binwidth = 500, fill="blue", alpha=0.9)+#isto cria um histograma com intervalos de 500 doentes
    geom_histogram(data=inpatient_hospital_lite |> filter(periodo>"2021-01-01"),aes(x=doentes_saidos), binwidth = 500, fill="red", alpha=0.5)

p1

```

Os dados de 2021 aparentem ter uma maior frequência de valores mais baixos que 2015.

Qual é a variação dos dados por Tipo de Especialidade

```{r}
p1 <- ggplot()+
    geom_histogram(data=inpatient_hospital_lite |> filter(tipo_de_especialidade=="Especialidade Médica"),aes(x=doentes_saidos), binwidth = 500, fill="blue", alpha=0.9)+#isto cria um histograma com intervalos de 500 doentes
    geom_histogram(data=inpatient_hospital_lite |> filter(tipo_de_especialidade=="Especialidade Cirurgica"),aes(x=doentes_saidos), binwidth = 500, fill="red", alpha=0.5)

p1

```

As Especialidades Médicas aparentem ter uma distribuição mais equilibrada de valores e os valores mais elevados parecem advir de valores de Especialidades Cirúrgicas.

Outras questões?

- Existem padrões diferentes nos hospitais centrais e periféricos?

- Existem diferenças entre os dados de Dezembro e de Junho?

## VALORES INCOMUNS ou IMPOSSÍVEIS

Pelos dados do summary sabemos que existem dados em falta e existem valores muito elevados que poderão ser outliers.

Estes dados podem ajudar a fazer novas inferências sobre os dados que temos.

### Valores Omissos

Para filtrarmos os dados em falta iremos utilizar a função is.na().

```{r}

inpatient_hospital_na <- inpatient_hospital_lite |> 
  filter(is.na(doentes_saidos))

inpatient_hospital_na 
```

Pela tabela podemos ver que a Unidade Local de Saúde da Guarda, EPE não reportou dados de doentes saidos. 

Será porque foram 0?
Sera porque não reportaram dados?

```{r}
inpatient_hospital_zero <- inpatient_hospital_lite |> 
  filter(doentes_saidos<10)

inpatient_hospital_zero
```

Não existem valore codificados para 0, sendo que o valor mínimo é de 3.

### Valores extremos OUTLIERS

Para efeitos de deteção de outliers foram consideradas todas as observações fora da equação abaixo.

$$ I=[q0.25−1.5⋅IQR;q0.75+1.5⋅IQR] $$

Tendo em conta os dados dos histogramas acima, vamo-nos focar nos dados de Especialidade Cirúrgica.

```{r}

inpatient_hospital_outliers <- inpatient_hospital_lite |> 
  filter(tipo_de_especialidade=="Especialidade Cirurgica")

summary(inpatient_hospital_outliers)
```

```{r}
q25 <- 1578
q75 <- 6184
median <- 3333
iqr <- q75-q25
  
inpatient_hospital_outliers <- inpatient_hospital_lite |> 
  filter(doentes_saidos>median+1.5*iqr|doentes_saidos<median-1.5*iqr)

nrow(inpatient_hospital_outliers)
```
Existem 627 valores que são outliers.

```{r}
q25 <- 1578
q75 <- 6184
median <- 3333
iqr <- q75-q25
  
inpatient_hospital_outliers <- inpatient_hospital_lite |> 
  filter(doentes_saidos>median+3*iqr|doentes_saidos<median-3*iqr)

nrow(inpatient_hospital_outliers)
```
Existem 158 valores que são outliers.

Vamos olhar para os valores superiores e ver que hospitais reportam estes valores.

```{r}
q25 <- 1578
q75 <- 6184
median <- 3333
iqr <- q75-q25
  
inpatient_hospital_outliers_nome <- inpatient_hospital_lite |> 
  filter(doentes_saidos>median+3*iqr) |>
  distinct(instituicao) |> 
  pull(instituicao)

inpatient_hospital_outliers_nome
```
Existem 6 hospitiais que reportam valores outliers severos superiores.

1. Centro Hospitalar Universitário do Porto, EPE
2. Centro Hospitalar Universitário Lisboa Central, EPE 
3. Centro Hospitalar e Universitário de Coimbra, EPE
4. Centro Hospitalar Universitário de São João, EPE 
5. Hospital de Braga, EPE
6. Centro Hospitalar Universitário de Lisboa Norte, EPE

## Covariação

A variação é o comportamento em relação a uma variável.
A covariação é a tendência dos valores de uma varíavel estarem relacionados

```{r}

```

# FERRAMENTAS DE EXPLORAÇÃO RÁPIDA

## SkimR

Para um EDA mais eficiente existem já pacotes criados como o Skimr.

Este pacote calcula logo:

- Número de dados em falta
- Média
- Mediana
- Desvio-Padrão
- Q0, Q25, Q50, Q75 e Q100

```{r}

skim(inpatient_hospital_lite)

```

Por Especialidade

```{r}

inpatient_hospital_lite |> 
  group_by(tipo_de_especialidade) |> 
  select(-dias_de_internamento, -periodo) |>
  skim()
```

Por instituição

```{r}

inpatient_hospital_lite |> 
  group_by(instituicao) |>
  select(-dias_de_internamento, -periodo) |> 
  skim()
```

## DataExplorer

O pacote Data Explorer tem uma função entitulada create_report que cria uma html baseado num dataset.

É possível definir uma variável de reposta, como um outcome que estejamos a procura de modelar.

```{r}

create_report(
  data=inpatient_hospital_lite,
  y = "doentes_saidos",
  output_file = "reportDataExplorer.html",
  output_dir = paste0(getwd(),"/outputs"),
  report_title = "Relatório de Exploração dos Dados",
              )
```

Exemplo de relatório do Data Explorer

```{=html}
<iframe width="780" height="500" src="outputs/reportDataExplorer.html" title="Report do Pacote Data Explorer"></iframe>
```

Reforçar que estas ferramentas apenas automatizam algum código, dependo do utilizador para a interpretação dos dados.

Outras opções:

```{=html}
<iframe width="780" height="500" src="https://miro.medium.com/v2/resize:fit:720/format:webp/1*swq8dNmFywVKrYJHoZT44Q.png" title="Comparação de Múltiplos pacotes de EDA, De Putatunda et al.(2019)"></iframe>
```
 
# FIM