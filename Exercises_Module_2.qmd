---
title: "Module 3 | Data Importation and Data Manipulation "
subtitle: "Data Wrangling"
author: "Autor"
affiliation: 
    - Escola Nacional de Saúde Pública
date: today
date-format: long
lang: pt  
format: 
  html:
    smooth-scroll: true
    self-contained: true
    toc: true
    toc-location: left
    embed-resources: true
    number-sections: true
    code_download: true
    code-fold: show
    fig_caption: true
    force_captions: true
    subtitle: ""
    urlcolor: darkblue
    linkcolor: darkblue
    fig_width: 12
    fig_height: 8
    always_allow_html: true
theme:
  light: flatly
  dark: darkly
execute:
  warning: false
  echo: true
  message: false
---

# Introdução

Esta série de exercios é destinada aos praticantes do curso de DATA SCIENCE WITH R IN HEALTHCARE.
Estes execícios são relativos ao módulo 3.

Os exercícios deste módulo abragem os seguintes temas:

1. Data Importation
2. Data Cleaning
3. Data Manipulation

Para elaborar estes exercícios são necessários dois ficheiros adicionais no formato ”.xlsx”.

Existem seções deste documento de avaliação do mesmo que não devem ser alteradas - Estão marcadas em secção própria.

Devo ser submetido o HTML resultante do render deste documento.


# Setup

```{r}
#| warning: false
#| message: false
#| error: false


rm(list = ls(all.names = TRUE)) 
# Packages
required_packages <- c(
                       "assertr",
                       "data.validator",
                       "janitor",
                       "tidyverse",
                       "rio"
                       # colocar aqui se foram utilizados mais pacotes
                       )      

for (pkg in required_packages) {
  # install packages if not already present
  if (!pkg %in% rownames(installed.packages())) {
    install.packages(pkg)
  }
  
  # load packages to this current session 
  library(pkg, character.only = TRUE)
}
remove(required_packages)
remove(pkg)

```

# Exercicio 1

Importar o ficheiro hipoxia disponível na pasta datasets para um objeto chamado hypoxia.

```{r importation}


```

# Exercício 2
Criar um novo objeto com o nome hypoxia_clean em que se fez a limpeza as variáveis tendo em contas as boas práticas.

```{r cleaning}


```

# Exercício 3

Criar um novo objeto com o nome hypoxia_adult em que:
- Existem apenas mulheres com idade superior a 25 e inferior 65 anos
- Há apenas as variáveis idade, raça, female, bmi, sleeptime, min_sao2 e ahi

```{r filtering and selecting}


```

# Exercício 4
Criar um novo objeto hypoxia_adult2 com uma nova variável no dataset hypoxia_adult com o nome min_sao_class com a seguinte codificação baseada na variável min_sao2:

1. 98-100 - Normal
2. 95-97 - Insuficiente
3. 94-90 - Hipóxia Ligeira
4. 80-89 - Hipóxia Moderada
5. <79 - Hipóxia Grave

```{r mutate and case_when}


```

# Exercicio 5 
Criar novo objeto hypoxia_final com:
  Nova variável media - Calcular a média de bmi (remover NA!)
  Nova variével desvio_padrao - Calcular desvio-padrão do BMI
Isto deve ser calculada por cada classe de min_sao_class

```{r summarise and grouping}

```


# Validation - NÃO ALTERAR

```{r validation for objects}
#| code-fold: true
#| echo: false
if(exists("hypoxia")) {
  print(":) DataFrame 'hypoxia' criado com sucesso")
} else {
  print(":( DataFrame 'hypoxia' não existe")
  hypoxia <- data.frame(
    ID = "A"
  )
}

if(exists("hypoxia_clean")) {
  print(":) DataFrame 'hypoxia' criado com sucesso")
} else {
  print(":( DataFrame 'hypoxia' não existe")
  hypoxia_clean <- data.frame(
    ID = "A"
  )
}
column_list <- c("age", "female", "race", "bmi", "sleeptime", "min_sao2", "ahi", "smoking", "diabetes", "hyper", "cad", 
                 "preop_anti_hyper_med", "cpap", "type_surg", 
                 "duration_of_surg", "duration_of_surg1", "duration_of_surg2", 
                 "twa_map", "twa_map1", "twa_map2", "twa_hr", "twa_hr1", 
                 "twa_hr2", "intraop_anti_hyper_med", "vasopressor", 
                 "ephedrine", "ephedrine_amt", "epinephrine", 
                 "epinephrine_amt", "phenylephrine", "phenylephrine_amt", 
                 "mac", "propofol_induction", "iv_morphine_eq", 
                 "crystalloids", "colloids")

if(all(column_list %in% colnames(hypoxia_clean))) {
  print(":) DataFrame 'hypoxia_clean' tem as colunas no formato adequado")
} else {
  print(":( DataFrame 'hypoxia_clean' não tem estrutura adequada")
}

if(exists("hypoxia_adult")) {
  print(":) DataFrame 'hypoxia_adult' criado com sucesso")
} else {
  print(":( DataFrame 'hypoxia_adult' não existe")
  hypoxia_adult <- data.frame(
    ID = "A",
    age= 1,
    female = 0
  )
}

if(exists("hypoxia_adult2")) {
  print(":) DataFrame 'hypoxia_adult2' criado com sucesso")
} else {
  print(":( DataFrame 'hypoxia_adult2' não existe")
  hypoxia_adult2 <- data.frame(
    ID = "A",
    age= 1,
    female = 0
  )
}

if(exists("hypoxia_final")) {
  print(":) DataFrame 'hypoxia_final' criado com sucesso")
} else {
  print(":( DataFrame 'hypoxia_final' não existe")
  hypoxia_final <- data.frame(
    ID = "A",
    media = 1,
    desvio_padrao = 1
  )
}
```


```{r validation for outputs}
#| code-fold: true
#| include: false

require(data.validator)
require(assertr)

report <- data_validation_report()

between <- function(a, b) {
  function(x) { a <= x & x <= b }
}


validate(hypoxia_adult, name = "Verifying data Hypoxia Adult") |>
  validate_cols(between(25,65), age, description = "Idades apenas superior 25 anos e menor de 65 anos") |> 
  validate_if(female>=1, description = "Apenas há mulheres nos dados de hypoxia_adult") |> 
  validate_if(has_only_names("age",
    "race",
    "female",
    "bmi",
    "sleeptime",
    "min_sao2",
    "ahi"),colnames(), description = "Hypoxia adult tem apenas as colunas pedidas") |>
  add_results(report)

validate(hypoxia_adult2, name = "Verifying data Hypoxia Adult 2") |>
  validate_cols(between(25,65), age, description = "Idades apenas superior 25 anos e menor de 65 anos no hypoxia_adult2") |> 
  validate_if(female>=1, description = "Apenas há mulheres nos dados de hypoxia_adult2") |> 
  validate_if(has_only_names("age",
    "race",
    "female",
    "bmi",
    "sleeptime",
    "min_sao2",
    "ahi",
    "min_sao_class"),colnames(), description = "Hypoxia adult 2 tem apenas as colunas pedidas") |>
  validate_if(
    unique(min_sao_class)%in% c(
      "Normal",
      "Insuficiente",
      "Hipóxia Ligeira",
      "Hipóxia Moderada",
      "Hipóxia Grave"
    ),min_sao_class, description = "min_sao_class as definições pedidas") |> 
  validate_if(
      nrow(filter(hypoxia_adult2, min_sao_class == "Hipóxia Grave"))== 69&
      nrow(filter(hypoxia_adult2, min_sao_class == "Hipóxia Ligeira"))== 15&
      nrow(filter(hypoxia_adult2, min_sao_class == "Hipóxia Moderada"))== 106
        ,
           description = "As classificações têm o número esperado de indivíduos")|>
  add_results(report)

validate(hypoxia_final, name = "Verifying data Hypoxia final") |>
  validate_if(has_only_names(
    "media",
    "desvio_padrao",
    "min_sao_class"), colnames(), description = "Hypoxia adult 2 tem apenas as colunas pedidas") |>
  validate_if(
      within_bounds(46.27882,46.27884)(mean(media, na.rm = TRUE))
        ,description = "O valor da média obtido está no esperado")|>
  validate_if(
      within_bounds(7.778,7.780)(mean(desvio_padrao, na.rm = TRUE)),desvio_padrao
        ,description = "O valor da desvio padrão obtido está no esperado")|>
  add_results(report)

get_results(report)
save_report(report, output_file ="outputs/validation_report_module2.html")

rm(list = ls())

```

```{=html}
<iframe width="100%" height=1000 src="outputs/validation_report_module2.html"></iframe>
```

