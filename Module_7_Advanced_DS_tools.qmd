---
title: "Module 7 | Advanced Data Science Tools"
author: "A. Peralta-Santos"
date: today
date-format: long
format:
  html:
    preview: false
    smooth-scroll: true
    embed-resources: true
    toc: true
    toc-location: left
    number-sections: true
    number-depth: 3
    code_download: true
    code-copy: true
execute:
  warning: false
  echo: TRUE
  message: false
params:
  ano: 2024
  escola: "ENSP"
  pessoa: "Aluno"
  edicao: "4ª"
  curso: "Data Science with R in Healthcare"
title-block-style: default
---

```{r pacotes}
#| echo: false
#| include: false

# Packages
required_packages <- c(
                       "tidyverse",
                       "rio",
                       "usethis",
                       "gptstudio"
                       )      

for (pkg in required_packages) {
  # install packages if not already present
  if (!pkg %in% rownames(installed.packages())) {
    install.packages(pkg)
  }
  
  # load packages to this current session 
  library(pkg, character.only = TRUE)
}
remove(required_packages)
remove(pkg)
```

# Introdução

O objetivo deste módulo não será o de ensinar todas as ferramentas disponíveis em R, mas o de guiar quando quiserem avançar para além dos conceitos dos módulos anteriores e para que possam retirar inspiração dos produtos mais recentes com exemplos disponíveis.

# AMBIENTES REPRODUTÍVEIS

A reprodutibilidade é um dos pilares da investigação.
Esta deve ser parte de todo o ciclo de data science.
Para isso é necessário haver *reprodutibilidade computacional*

Isto pode incluir situações como:

- Refazer uma análise
  - Por um colega com outro sistema
  - Pelo individuo noutro local ou tempo
  - Por outros para validação dos nossos resultados
- Reutilização de código
- Colocar código em produção

Para estas situações é necessário estabilidade no ambiente computacional que utilizamos.

Para isso temos o RENV.

```{=html}
<iframe width="780" height="500" src="https://rstudio.github.io/renv/articles/renv.html" title="Introdução ao RENV"></iframe>
```

## RENV

O RENV ajuda na criação de AMBIENTES REPRODUTÍVEIS ISOLADOS do sistema em que correm.

Neste sistema existe uma separação claro entre o que são as bibliotecas do sistema e as bibliotecas do nosso projeto.

![Sistema de Produção de um Sistema RENV](images/renv.png)

Vantagens:

- Diminuição dos problemas de correr num computador e não noutro
- Não existe atualização automática de pacotes e dependências por isso se novas atualizações quebrarem o nosso projeto.

Desvantagens:

- Necessita de muito espaço

### Como criar?

- Ativar com o comando renv::init()
- Colocar essa opção ao criar novo projeto

![Possibilidade de criar um projeto com reprodutibilidade como prioridade](images/renv_init.png){width="100%"}

### Como documentar?

Existe a função snapshot() que permite documentar a origem e gravamos no ficheiro "renv.lock" que é o arquivo de todas as opções que definimos

### Como colaborar?

O comando renv::status() permite saber os próximos passos como eu, colega que quer reproduzir o que me foi enviado o possa fazer de forma semelhante.

Este comando dá logo orientação como proceder.

Worflow:

1. init
2. install
3. snapshot
produção
4. restore

## SLUSHY

O pacote slushy foi criada pela empresa GSK.

O objetivo é o de, ao invés de termos projetos congelados (como o RENV), mas o de termos programadores podemos querer avançar de forma lenta com o tempo sem perder estabilidade, introduzindo novas versões e verificando problemas

Workflow:

1. new_config()  
2. slushy_init()
3. slushy_add("packagename")
4. slushy_drop("packagename")
5. slushy_update(date = "2023-01-01") 

- A vantagem do Slushy está em poder usar snapshot do CRAN para adquirir pacotes e atualizar o projeto.

```{=html}
<iframe width="780" height="500" src="https://gsk-biostatistics.github.io/slushy/" title="Slushy as an alternative to RENV"></iframe>
```

# INTERMIDIATE QUARTO

## Includes

Em Quarto, esiste um funcionalidade para reutilização eficiente de conteúdo entre vários documentos.

Reutilizar conteúdo como secções de texto comuns, código ou resultados, em vários documentos em Quarto é possível usando o código "{{< include >}}". 

Ex: Um boletim externo sem anexos para divulgação e um boletim interno com internos com anexos de validação.

Exemplo:

{{< include Include.qmd >}}

```{r}
#| echo: true

# ---
# title: "Relatórios Conjuntos"
# ---
# 
# {{< include Relatório_hospitalA.qmd >}}
# {{< include Relatório_hospitalB.qmd >}}
# 
# Usar os dados e outputs do documentos atuais...
```


Benefícios:

1. Evitar a repetição de código
2. Modularidade (múltiplos documento com parte modulares de mais fácil correção)
3. Conteúdo Dinâmico

## Parameters in Quarto

Os parâmetros em Quarto é uma funcionalidade que aumenta a personalização dinâmica do conteúdo de um documento.

Este tipo de funcionalidade é útil em várias situações:

1. Análises de anos diferentes após correções de dados ou atualização da análises
2. Criação de documento personalizados baseados em critérios que são definidos:
    - ULS
    - Região
    - Cidade
3. Relatórios para pessoas diferentes.

```{r}
#| eval: false

---
title: "Relatório de Saúde Regional"
params:
  ano: 2024
  escola: "ENSP"
  pessoa: "Aluno"
  edicao: "4ª"
  curso: "Data Science with R in Healthcare"
---


```
  

Nós estamos na `r params$edicao` do curso `r params$curso` na `r params$escola` e este documento pertence ao `r params$pessoa`.

Um exemplo de como podemos mudar o output será correndo o seguinte código na consola.

```{r}
#| eval: false
#| echo: false
quarto::quarto_render(input="Module_7_Advanced_DS_tools.qmd",
                      output_format = "html",
                      execute_params = list(
                        ano= 2026,
                        escola= "ENSP",
                        pessoa= "João Dionísio", # Mudar o nome do aluno e ver o output
                        edicao= "4ª",
                        curso= "Data Science with R in Healthcare"
                      )
                      )
```


## Quarto Dashboards

# GIT E GITHUB - INTRO

## O quê?

O Git é um sistema de controle de versão distribuído, utilizado para controlar mudanças em arquivos de código durante o desenvolvimento de código.

GitHub é uma plataforma baseada na web que utiliza os sistema Git para o armazenamento e gestão de repositórios de código.

![Git como sistema de controlo de versões e GitHub como plataforma colaborativas e de partilha de projetos](images/git-github.png){width="100%"}

## Porquê?

Vantagens de usar um sistema git nos nossos projetos:

1. Controlo de versões - Permite que múltiplas versões estejam armazenadas. Se um erro for introduzido, é simples reverter para uma versão anterior.
2. Versões locais - Permite que cada colaborador num projeto trabalhe numa cópia local dos ficheiros e possa consultar o histórico de alterações.
3. Ramificações e Fusão - Permite a criação de ramificações (branches) para testar análise e relatórios isoladamente. Estas ramificações podem ser fundidas (merge) de volta ao ramo principal (master/main) após a conclusão do seu desenvolvimento. 

O plataforma Github permite o armazenamento e gestão de repositórios/projetos de código. Para além disso permite:

1. Armazenamento remoto de código (limites de armazenamento é de 1 Gb com tráfego de dados de 1 Gb)
2. 

## Como implementar?




# AUTOMATED REPORTING 

## Github Actions

## Task Schedualing (Gestão de tarefas automáticas)

## Emails automáticos

# GENERATIVE AI MODELS IN R Programming

Desde Novembro de 2022 que se têm falado de modelos de inteligência artificial generativa.

Este modelos, um subconjunto da inteligência artificial, são projetados para gerar novos dados que se assemelham a dados existentes. 


### Modelos de Linguagem de Grande Escala (LLMs) na Programação

LLMs como o ChatGPT ganharam atenção significativa pela sua capacidade de compreender e gerar texto semelhante ao humano. 

Na programação e na gestão de dados, estes modelos podem ser aproveitados para escrever código, filtrar código ou explicar pedaços de código complexos. O seu entendimento de linguagem natural e linguagens de programação permite que elevar as capacidades dos utilizadoreses de maneira conversacional, com o potencial de aumentar significativamente a produtividade.

Vantagens:

- Gerar código ou adaptar código de outras linguas para R
- Apoiar na gestão de erros ou bugs
- Documentação e Explicação: A leitura da documentação por vezes é dificil numa fase inicial e os modelos permitem baixar a complexidade na leitura e explicar pedaços de código com múltiplos níveis de complexidade.

Limitações:

- Apesar de em códigos simples gerar poucos erros, existe a possibilidade do mesmo não seguir as boas práticas e ser optimizado para um melhor desempenho.
  - Ex: Quando a pedir código de Data cleaning e Wrangling o CHAT GPT por vezes escolhe R base que é mais dificil de compreender.
- Comprensão do Contexto: Quanto tempos documentos mais longos com múltiplas peças (ex: aplicações Shiny, múltiplos documentos Quarto) o ChatGPT dificilmente conseguirá compreder os nossos requisitos no prompt
- Depedência: O ChatGPT deve ser um ferramenta para impulsionar a nossa aprendizagem da lingua e não ser a única ferramenta que utilizamos
- Diferentes resultados para as mesmas perguntas.
- Limitações temporais
- Questões Éticas e Partilha de dados sensíveis.

Existem múltplas LLM mas o mais conhecido é o CHAT-GPT

```{=html}
<iframe width="780" height="500" src="https://chat.openai.com/" title="LLM as a part for productive programming"></iframe>
```

Podemos pedir ao ChatGPT para nos elaborar uma função que calcule o BMI a partir de uma idade e altura.

```{r}


```

A fase seguinte poderá ser a da integração de LLM nas nossas ferramentas de programação. Ex: RSTUDIO

Existe o Copilot in RSTUDIO mas é pago.

![Localização da Configuração do Copilot](images/copilot.png)

## Como colocar o CHAT GPT no Rstudio - Não funciona

O processo ainda não está muito otimizado mas colocamos os passos para instalar o add-in GPTSTUDIO:

1. Necessário criar conta com a OpenAI
2. Criar [API com a OPENAI](https://platform.openai.com/api-keys)
3. Instalar o pacote usethis e correr o seguinte código  usethis::edit_r_environ()
4. Criar variável OPENAI_API_KEY="api-key"

:::{.callout-warning}
Nunca colocar a API num reposirório público.
:::

5. Reiniciar a sessão
6. Correr o Add-in do GPTStudio

:::{.callout-warning}
Para já não recomendamos este uso enquanto as ferramentas não estabilizarem no RSTUDIO.
:::

```{r}
# Criar API da OpenAI
# https://platform.openai.com/api-keys
# Copiar a api key

# usethis::edit_r_environ()
# Adicionar e guardar a seguinte linha de código
#OPENAI_API_KEY="api-key" copiada de cima
# Sys.getenv("OPENAI_API_KEY")
# Gptstudio deve estar nos add-ins 

```

Esta semana não existem exercícios para que o foco seja o projeto *capstone*.

# Fim