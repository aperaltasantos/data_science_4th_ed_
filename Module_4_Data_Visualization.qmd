---
title: "Module 4: Data Visualization"
author: "A. Peralta-Santos"
date: today
date-format: long
format:
  html:
    smooth-scroll: true
    embed-resources: true
    code-copy: true
    code_download: true
    toc: true
    toc-location: left
theme: cosmo
smooth-scroll: true
execute:
  warning: false
project:
  output-dir: outputs/documents
---

# PRINCIPIOS DE VISUALIZAÇÃO

por Cédric Scherer

1.  INFORMAÇÃO (integridade) Apresentar os dados de forma precisa e honesta, sem manipular ou distorcer os fatos para enganar o público.

2.  HISTÓRIA (interesse) Narrativa cativante dentro da visualização de dados, tornando a informação não apenas informativa, mas também envolvente e memorável para o espectador.

3.  OBJETIVO (utilidade) Garantir que a visualização de dados sirva a um propósito claro, seja para informar, persuadir, educar ou apoiar a tomada de decisões.

4.  FORMA VISUAL (beleza) Valor do design esteticamente agradável na visualização de dados, que realça a experiência do leitor e pode tornar as informações complexas mais acessíveis e compreensíveis.

5.  Dicas úteis Layout Limpo --- "menos é mais"

-   Use anotações diretas para melhorar a legibilidade e interpretabilidade.
-   Utilize hierarquia para orientar o leitor.
-   Uso consistente de cores, espaçamento, tipos de letra e peso.
-   Use cores sabiamente e certifique-se de que funcionam para pessoas com daltonismo.
-   As informações mais importantes devem receber a principal atenção.

![Exemplo por Cédric Scherer](images/exemplo_viz.png)\

## Valor da vizualização

**... make both calculations and graphs. Both sorts of output should be studied; each will contribute to understanding.**\
F. J. Anscombe (1973)

"Há uma razão pela qual os cientistas de dados gastam tanto tempo explorando dados usando gráficos. Confiar apenas em medidas de tendencia e dispersão como médias, variâncias e correlações pode ser perigoso, porque conjuntos de dados muito diferentes podem dar resultados semelhantes.

Este é um princípio que tem sido demonstrado em aulas de estatística por décadas com o Quarteto de Anscombe: quatro gráficos de dispersão que, apesar de serem qualitativamente diferentes, têm a mesma média e variância e a mesma correlação entre eles."

![Todas as distribuições têm a mesma média e variancia](images/datasauros.png)

## Boas práticas 

**1. Saber quando usar 0 na escala** 
"Ao usar gráficos de barras, é enganoso não começar as barras a partir de 0. Isso porque, ao usar um gráfico de barras, estamos implicando que o comprimento é proporcional às quantidades exibidas. Ao evitar o 0, diferenças relativamente pequenas podem parecer muito maiores do que realmente são. Essa abordagem é frequentemente usada por políticos ou organizações de mídia tentando exagerar uma diferença."


**2. Ordenar os valores **
Quando um dos eixos é usado para mostrar categorias, como é feito em gráficos de barras, o comportamento padrão do ggplot2 é ordenar as categorias alfabeticamente quando são definidas por cadeias de caracteres. Se forem definidas por fatores, são ordenadas pelos níveis dos fatores. Raramente queremos usar a ordem alfabética. Em vez disso, devemos ordenar por uma quantidade significativa.

**3. Uso da cor **
Ao criar visualizações de dados, é crucial escolher a escala de cores adequada para transmitir informações de forma eficiente e precisa. Aqui estão as boas práticas sobre quando usar escalas de cores sequenciais, qualitativas e divergentes:

1. **Escala de Cores Sequencial**: 
   - **Uso**: Ideal para representar dados quantitativos que possuem uma ordem natural ou progressão, como temperaturas, idades ou níveis de renda.
   - **Características**: Apresenta uma progressão suave de cores, geralmente variando de claras a escuras ou vice-versa.

2. **Escala de Cores Divergente**: 
   - **Uso**: Ideal para dados que possuem um ponto central importante, como variações em relação a uma média ou zero.
   - **Características**: Combina duas escalas de cores sequenciais com um ponto de transição, geralmente ao redor de um valor médio, destacando desvios em duas direções opostas.
   
3. **Escala de Cores Qualitativa**: 
   - **Uso**: Adequada para dados categóricos sem ordem ou classificação inerente, como grupos de países, tipos de produtos ou categorias de serviços.
   - **Características**: Composta por cores distintas que facilitam a diferenciação entre as categorias. 
   - **Exemplo Prático**: Em um gráfico de barras mostrando vendas por categoria de produto, cada categoria (como eletrônicos, vestuário, alimentos) pode ser representada por uma cor diferente.


![Uso da cor por Cedir Scherer](images/uso_cor.png)

**4. Pensar nos daltonicos **
Podemos usar uma serie de cores que conseguem ser percepcionadas por daltonicos.


## Exemplos de visualização de dados

### Alterações climáticas

![Yearly fluctuations in area of Arctic covered by ice](images/climate_change_photo.png)

Fonte <https://www.nytimes.com/interactive/2015/03/24/science/earth/arctic-ice-low-winter-maximum.html>

### COVID-19

![Excesso de Mortes por COVID-19](images/covid19.png) Fonte <https://www.ft.com/content/f1a270c3-3870-46ad-99e8-45b5d8f127e0>

## Qual o tipo de gráfico que devo escolher?

Exempleos de websites onde podemos pesquisar qual o melhor gráfico para cada situação.

[Data to viz website](https://www.data-to-viz.com/)

[Data to viz project](https://datavizproject.com/)

[Extensions of ggplot2](https://exts.ggplot2.tidyverse.org/gallery/)

[Principles of good visuals](https://github.com/GraphicsPrinciples/CheatSheet/blob/master/NVSCheatSheet.pdf)

# GGPLOT

o ggplot é uma gramatica de graficos, em que cada elemento é uma instrução para a elaboração do grágico final

Contem os seguintes elementos

1.  data: O componente de dados.

2.  geom: É o tipo de gráfico. p.e. gráfico de barras, histograma, densidades suaves, qqplot e boxplot.

3.  mapping: Posições dos pontos no eixo x e eixo y. Cada ponto representa uma observação diferente, e mapeamos dados sobre essas observações para pistas visuais como escalas x e y. A cor é outra pista visual que mapeamos para a região. Referimo-nos a isso como o componente de mapeamento estético. Como definimos o mapeamento depende da geometria que estamos usando.

4.  Facets - semelhante ao agrupar por

5.  Theme - Tema do grafico p.e. preto e branco, especifico para mapas

6.  Labels: define outros elementos do gráfico como titutlo, legendas

![Anatomia do ggplot](images/ggplot.png)

```{r}
# install.packages("ggthemes")
# install.packages("scales")
# install.packages("patchwork")
# install.packages("sf")
```

```{r}
# Packages
required_packages <- c(
                       "tidyverse",
                       "rio",
                       "scales",
                       "here",
                       "patchwork",
                       "sf"
                       )      

for (pkg in required_packages) {
  # install packages if not already present
  if (!pkg %in% rownames(installed.packages())) {
    install.packages(pkg)
  }
  
  # load packages to this current session 
  library(pkg, character.only = TRUE)
}
remove(required_packages)
remove(pkg)
```

```{r}
rm(list = ls(all.names = TRUE)) #will clear all objects includes hidden objects.

```

```{r}
# change outpurs to output
inpatient_hospital_lite <- import("output/datasets/inpatient_hospital_lite.csv")

## são equivalentes

inpatient_hospital_lite <- import(here("output", "datasets", "inpatient_hospital_lite.csv"))
```

## Data and aestetics

```{r}
# 1. Vamos definir só os dados 
ggplot(data = inpatient_hospital_lite)
```

```{r}
# 2. Definir o eixo dos X e Y
ggplot(
  data = inpatient_hospital_lite, 
  mapping = aes(x = tipo_instituicao, y = doentes_saidos_var)
)
```

```{r}
# 3. Definir o tipo de gráfico
ggplot(data= inpatient_hospital_lite, 
            aes(x = tipo_instituicao, y = doentes_saidos_var)) +
  geom_boxplot()
```

```{r}
# 4. Criar um objecto ggplot e invoca-lo

p <- ggplot(data= inpatient_hospital_lite, 
            aes(x = tipo_instituicao, y = doentes_saidos_var)) +
  geom_boxplot()
p
```

## Geometrics

### Box plot

```{r}
# IMPORTANT
# We can create a generic ggplot argument if we want to combite 2 diferent datasets with the same x and y axis

p1<- inpatient_hospital_lite |> ggplot() + # Podemos adicionar os dados antes do ggplot 
    geom_boxplot( aes(x = tipo_instituicao   , 
                      y = doentes_saidos_var ),
                  outlier.shape = NA) # Exclui os outliers
p1
```

## Facets

A facetação gera múltiplos pequenos gráficos, cada um exibindo um subconjunto diferente dos dados. Facetas são uma alternativa às estéticas para exibir variáveis discretas adicionais.

```{r}
p1<- ggplot(data= inpatient_hospital_lite, 
            aes(x = tipo_instituicao, y = doentes_saidos_var)) +
  geom_boxplot( outlier.shape = NA) +
  facet_wrap(~tipo_de_especialidade)
p1

```

## Labels

```{r}
# Podemos adicionar o titutlo, nomes do eixos e fonte

p1<- ggplot(data= inpatient_hospital_lite, 
            aes(x = tipo_instituicao, y = doentes_saidos_var)) +
  geom_boxplot(outlier.shape = NA) + 
  labs(title = "Number of inpatients discharged in Hospitals", # Titulo
         subtitle = "2015-2022", # Subtitulo
         y = "Number of inpatients discharged", # Eirxo dos Y
         x = "Type of hospital", # Eixo dos X
         caption = "Source: Ministry of Health, Portugal", # Fonte
         tag = "A") # Tag da imagem, util em textos com imagens multiplas
p1
```

## Theme

Define a estetica do gráfico, tamanhos de letra, alinhamentos, cores do fundo

```{r}
# Theme classic

p1<- ggplot(data= inpatient_hospital_lite, 
            aes(x = tipo_instituicao, y = doentes_saidos_var)) +
  
  geom_boxplot(outlier.shape = NA) + 
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of  hospital", 
         caption = "Source: Ministry of Health, Portugal") +
  
  theme_classic() 
  

p1
```

```{r}
# Theme Black and white
# Good for publishing

p1<- ggplot(data= inpatient_hospital_lite, 
            aes(x = tipo_instituicao, y = doentes_saidos_var)) +
  geom_boxplot( outlier.shape = NA) + 
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of  hospital", 
         caption = "Source: Ministry of Health, Portugal") +
  
  theme_bw()  

p1
```

```{r}
# Theme The Economist
# O package ggthemes permite facilmente adoptar estilos pré-definidos de temas

p1<- ggplot(data= inpatient_hospital_lite, 
            aes(x = tipo_instituicao, y = doentes_saidos_var)) +
  geom_boxplot( outlier.shape = NA) + 
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of  hospital", 
         caption = "Source: Ministry of Health, Portugal") +
  
  theme_economist()  

p1
```

### Criar o proprio tema

Podemos criar o nosso proprio tema como um objecto e depois invocar esse tema para os nossos objectos ggplot

```{r}
# Criar o tema 
theme_r_datascience <- 
  theme_bw() + 
  theme(
    plot.title = element_text(face = "bold", size = 12),
    legend.background = element_rect(
      fill = "white", 
      linewidth = 4, 
      colour = "white"
    ),
    legend.justification = c(0, 1),
    legend.position = c(0, 1),
    axis.ticks = element_line(colour = "grey70", linewidth = 0.2),
    panel.grid.major = element_line(colour = "grey70", linewidth = 0.2),
    panel.grid.minor = element_blank()
  )

```

```{=html}
<iframe width="780" height="500" src="https://www.rdocumentation.org/packages/ggplot2/versions/3.4.4/topics/theme" title="Rio Package"></iframe>
```
```{r}
p1<- ggplot(data= inpatient_hospital_lite, 
            aes(x = tipo_instituicao, y = doentes_saidos_var)) +
  geom_boxplot( outlier.shape = NA) + 
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of  hospital", 
         caption = "Source: Ministry of Health, Portugal") +
  
  theme_r_datascience  

p1
```

### Alterar um tema existente

```{r}
# NOT WORKING
library(sysfonts)
library(showtext)
font_add_google("Open Sans", family = "Open Sans")
font_add_google("Special Elite", family = "special")
showtext_auto()

## change global theme settings (for all following plots)
theme_set(theme_minimal())
theme_replace(text=element_text(family = "Open Sans"))
# ao definir com o theme set todos os plot estarão com o minimal com Open Sans a não ser que passemos um argumento de tema 
```

```{r}
p1<- ggplot(data= inpatient_hospital_lite, 
            aes(x = tipo_instituicao, y = doentes_saidos_var)) +
  geom_boxplot( outlier.shape = NA) + 
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of  hospital", 
         caption = "Source: Ministry of Health, Portugal")
p1
```

## Outros elementos

```{r}
# Limitar o eixo dos Y a um máximo de 4000
p2<- ggplot(data= inpatient_hospital_lite, 
            aes(x = tipo_instituicao, y = doentes_saidos_var)) +
  geom_point() +
  geom_boxplot(outlier.shape = NA) + 
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of hospital", 
         caption = "Source: Ministry of Health, Portugal") +
  ylim(0,4000) 

p2
```

```{r}
# Alterar a cor de preenchimentos do box plot 

p_final_1<- ggplot(data= inpatient_hospital_lite, 
            aes(x = tipo_instituicao, 
                y = doentes_saidos_var)
            ) +
  geom_boxplot(outlier.shape = NA,
               fill = "gray", 
               colour = "black") + 
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of hospital", 
         caption = "Source: Ministry of Health, Portugal") +
  ylim(0,4000)
  #theme(plot.background = element_rect("white")
        #)

 p_final_1
```

# Save plot

Podemos gravar o nosso gráfico em vários formatos

```{r}
# ggsave | Salva o último gráfico na memória
# Podemos usar o pacote aqui para especificar o diretório de saída
# Podemos especificar o formato de saída
# O tamanho
# A resolução em dpi

ggsave(
  p_final_1,
  filename = here::here("output", "figures", paste0( "hospital_inpatients", ".png")),
  width = 20,
  height = 10,
  units = c("cm"),
  dpi = "retina",
  bg = "white"
)
```

```{r}
# Podemos alterar o formato do grafico para PDF

ggsave( filename = "output/figures/hospital_inpatients.pdf",
        plot= p_final_1,
        width = 25.49,
        height = 12.3,
        units = c("cm"),
        dpi = 600 )
```

```{r}
# Podemos alterar o formato para JPEG 

ggsave( filename = here::here("output_figures", 
                  paste0( "hospital_inpatients", ".jpeg")),
        plot= p_final_1,
        width = 25.49,
        height = 12.3,
        units = "cm",
        dpi = 600 )
```

# TIPOS DE GRÁFICOS

## VISUALIZAR DISTRIBUIÇÕES

### Density plot  

```{r}

p1<- ggplot(data=inpatient_hospital_lite, 
       aes(x=doentes_saidos_var)
       ) +
  geom_density() +
  labs(title = "Doentes Saídos",
         subtitle = "Hospitais 2015-2022",
         y = "Densidade",
         x = "Número de doentes saídos", 
         caption = "Source: Ministry of Health, Portugal") +

  theme_minimal()

p1
```

Por tipo de especialidade

```{r}

p1<- ggplot(data=inpatient_hospital_lite, 
       aes(x=doentes_saidos_var,
           fill=tipo_de_especialidade)
       ) +
  geom_density(alpha=.4) +
    labs(title = "Doentes Saídos",
         subtitle = "Hospitais 2015-2022",
         y = "Densidade",
         x = "Número de doentes saídos", 
         caption = "Source: Ministry of Health, Portugal") +

  theme_minimal()

p1
```

### Histogram 
```{r}

p1<- ggplot(data=inpatient_hospital_lite, 
       aes(x=doentes_saidos_var,
           fill=tipo_de_especialidade)
       ) +
  geom_histogram(alpha=.4) +
    labs(title = "Doentes Saídos",
         subtitle = "Hospitais 2015-2022",
         y = "Contagem da frequência de doentes saídos",
         x = "Número de doentes saídos", 
         caption = "Source: Ministry of Health, Portugal") +

  theme_minimal()

p1
```

### Jitter plot

```{r}
# Let's change the caracteristics of the box plot
# Change the colours and theme
# Dont show the NA in the plot

p1<- ggplot(data= inpatient_hospital_lite, 
            aes(x = tipo_instituicao, 
                y = doentes_saidos_var)
            ) +
  geom_jitter(alpha=0.05, # Transparencia 1- sem transparencia 0- transparente
              width = 0.3,
              colour = "gray") +
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of hospital", 
         caption = "Source: Ministry of Health, Portugal") +
  theme_minimal()
p1
```

## COMPARAR QUANTIDADES

### Bar plots

Um gráfico de barras mostra a relação entre uma variável numérica e uma variável categórica. Cada entidade da variável categórica é representada como uma barra. O tamanho da barra representa seu valor numérico.

O gráfico de barras é às vezes descrito como uma forma monótona de visualizar informações. No entanto, é provavelmente a maneira mais eficiente de mostrar esse tipo de dados. Ordenar as barras e fornecer boas anotações são frequentemente necessários.

```{r}
inpatient_hospital_year <- inpatient_hospital_lite |>
  summarise(
    doentes_saidos_var = sum(doentes_saidos_var, na.rm = TRUE), 
    .by= c(year, tipo_instituicao)
    )
  
    
```

#### Dodge bar plot

Cria barras paralelas

```{r}
p1<- ggplot(data= inpatient_hospital_year, 
            aes(x = year, 
                y = doentes_saidos_var,
                fill=tipo_instituicao) # ALERT
            ) +
  geom_bar(position="dodge", 
           stat="identity"
           ) +
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of hospital", 
         caption = "Source: Ministry of Health, Portugal") 

p1

```

Specify the colours of the bar plots and flip the coordinates

```{r}

library(scales)
#extract hex color codes for a plot with three elements in ggplot2 
hex <- hue_pal()(3)
hex 

inpatient_hospital_year <- inpatient_hospital_year |>
  mutate(
    tipo_instituicao = factor(tipo_instituicao, levels = c("Hospital", "University", "Cancer hospital"))
  ) 


p1<-  ggplot( data = inpatient_hospital_year,
            aes(x = year, 
                y = doentes_saidos_var,
                fill=tipo_instituicao)
            ) +
  geom_bar(position="dodge", 
           stat="identity"
           ) +
  coord_flip() +
  scale_y_continuous(labels = comma) +
  
  scale_fill_manual(values=hex) +
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of hospital", 
         caption = "Source: Ministry of Health, Portugal",
         fill="") +
  theme_minimal() +
  theme(legend.position="bottom")

p1

```

#### Stacked bar plot

Cria barras empilhadas

```{r}
p1<-  ggplot( data = inpatient_hospital_year,
            aes(x = year, 
                y = doentes_saidos_var,
                fill=factor(tipo_instituicao, 
                            levels = c("Hospital", "University", "Cancer hospital")))
            ) +
  geom_bar(position="stack", 
           stat="identity"
           ) +
  
  scale_y_continuous(labels = comma) +
  scale_fill_manual(values=c("#00BA38","#619CFF" ,"#F8766D")) +
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of hospital", 
         caption = "Source: Ministry of Health, Portugal",
         fill="") +
  theme_minimal() +
  theme(legend.position="bottom")

p1
```


## COMPARAR PROPORÇÕES

### Bar plots

#### Fill

Cria barras de area relativa (percentagem)

```{r}
p1<-  ggplot( data = inpatient_hospital_year,
            aes(x = year, 
                y = doentes_saidos_var,
                fill=factor(tipo_instituicao, 
                            levels = c("Hospital", "University", "Cancer hospital")))
            ) +
  geom_bar(position="fill", 
           stat="identity"
           ) +
  
  scale_y_continuous(labels = percent) +
  scale_fill_manual(values=c("#00BA38","#619CFF" ,"#F8766D")) +
  
  labs(title = "Percentage of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Percentage  of inpatients discharged",
         x = "Type of hospital", 
         caption = "Source: Ministry of Health, Portugal",
         fill="") +
  theme_minimal() +
  theme(legend.position="bottom")

p1
```



### Doughnut plot

```{r}

# Create test data.
data <- data.frame(
  category=c("Cancer Hospital", "University", "Hospital"),
  count=c(2, 23, 75)
)
 
# Compute percentages
data$fraction <- data$count / sum(data$count)

# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)

# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))


# Make the plot
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
  geom_rect() +

  coord_polar(theta="y") +
  xlim(c(2, 4))  +
  scale_fill_manual(values=c("#00BA38","#619CFF" ,"#F8766D")) +
  
  labs(title = "Percentage of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         caption = "Source: Ministry of Health, Portugal",
         fill="") +
  theme_void() 
```

## RELAÇÕES ENTRE VARIAVEIS 
  
### Scatterplot

Um gráfico de dispersão exibe a relação entre 2 variáveis numéricas. Para cada ponto de dados, o valor da primeira variável é representado no eixo X e o da segunda no eixo Y.

```{r}
inpatient_hospital_lite <- inpatient_hospital_lite |>
  filter(dias_de_internamento_var<40000)
```

```{r}

ggplot(data = inpatient_hospital_lite, 
       aes(x=dias_de_internamento_var, y=doentes_saidos_var)) + 
  geom_point(alpha=0.5) +
  theme_clean()

```

Adicionar mais elementos

```{r}

p1<- ggplot(data = inpatient_hospital_lite, 
       mapping = aes(x=dias_de_internamento_var, y=doentes_saidos_var, colour=tipo_de_especialidade))+ 
  geom_point(alpha=0.2) +
    labs(title = "Number of inpatients discharged and length of stay",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Length of stay ", 
         caption = "Source: Ministry of Health, Portugal",
       colour="") +
  ylim(0, 3000) +
  xlim(0, 25000) +
  theme_minimal() +
  theme(legend.position="bottom")

p1
```

Podemos adicionar uma condição à cor

```{r}

p1<- ggplot(inpatient_hospital_lite, 
       aes(x=dias_de_internamento_var, 
           y=doentes_saidos_var, 
           colour=dias_de_internamento_var > 10000)
       ) + 
  geom_point(alpha=0.1
             ) +
    labs(title = "Number of inpatients discharged and length of stay",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Length of stay ", 
         caption = "Source: Ministry of Health, Portugal") +
  theme_minimal() +
  theme(legend.position="bottom")

p1
```

::: callout-warning
**ATENÇÃO** Se queremos definir uma cor temos de definir fora o aes.
:::

```{r}

p1<- ggplot(inpatient_hospital_lite, 
       aes(x=dias_de_internamento_var, 
           y=doentes_saidos_var,
           shape = tipo_de_especialidade)
       ) + 
  geom_point(alpha=0.9,
             color="#0868ac"
             ) +
    labs(title = "Number of inpatients discharged and length of stay",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Length of stay ", 
         caption = "Source: Ministry of Health, Portugal",
         colour="") +
  theme_minimal() +
  theme(legend.position="bottom")

p1
```

#### Adicionar medidas de tendencia

##### Linear

```{r}

p1<- ggplot(inpatient_hospital_lite, 
       aes(x=dias_de_internamento_var, 
           y=doentes_saidos_var, 
           colour=tipo_de_especialidade)) + 
  geom_point(alpha=0.1) +
  # NEW
  geom_smooth(method=lm, 
              se=FALSE,
              linetype="dashed") +
  
    labs(title = "Number of inpatients discharged and length of stay",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Length of stay ", 
         caption = "Source: Ministry of Health, Portugal",
       colour="") +
  theme_minimal() +
  theme(legend.position="bottom")

p1

```

##### Não linear

```{r}

p1<- ggplot(inpatient_hospital_lite, 
       aes(x=dias_de_internamento_var, 
           y=doentes_saidos_var, 
           colour=tipo_de_especialidade)) + 
  geom_point(alpha=0.1
             ) +
  # NEW
  geom_smooth(method=loess, 
              se=FALSE,
              linetype="dashed") +
  
    labs(title = "Number of inpatients discharged and length of stay",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Length of stay ", 
         caption = "Source: Ministry of Health, Portugal",
       colour="") +
  theme_minimal() +
  theme(legend.position="bottom")

p1

```



## Line plot

Um gráfico de linhas ou gráfico linear exibe a evolução de uma ou várias variáveis numéricas. Os pontos de dados são conectados por segmentos de linha reta. É semelhante a um gráfico de dispersão, exceto que os pontos de medição são ordenados (tipicamente pelo seu valor no eixo x) e unidos com segmentos de linha reta.

Um gráfico de linhas é frequentemente usado para visualizar uma tendência nos dados ao longo de intervalos de tempo -- uma série temporal -- portanto, a linha é frequentemente desenhada de forma cronológica.

```{r}
inpatient_hospital_sum <- inpatient_hospital_lite |>
  summarise(
    doentes_saidos_var = sum(doentes_saidos_var, na.rm = TRUE)
    ,.by = c(periodo, tipo_instituicao))
    
```

### Gráfico de linhas

```{r}
# Now let's make a similar plot but with a line across time

p1<- ggplot() +
  
  geom_line(data= inpatient_hospital_sum,  # definimos que é um grafico de linhas 
            aes(x = periodo, 
                y = doentes_saidos_var,
                colour = tipo_instituicao)) + # queremos que cada tipo de instituição tenha uma cor

  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of hospital", 
         caption = "Source: Ministry of Health, Portugal") +
  
  theme_minimal() 

p1

```

### Alterar o posicionamento da legenda

```{r}
# Lets change the position of the legend

p1<- ggplot() +
  geom_line(data= inpatient_hospital_sum, 
            aes(x = periodo, 
                y = doentes_saidos_var,
                colour=tipo_instituicao)) +
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "", 
         caption = "Source: Ministry of Health, Portugal",
       colour = "") +
  theme_minimal() +
  theme(legend.position="bottom",
        legend.title=element_blank(),
        plot.title = element_text(face = "bold", size = 12)
        )

p1

```

### Alterar a cor e tipo da linha

```{r}
# Lets change the position of the legend

p1<- ggplot() +
  geom_line(data= inpatient_hospital_sum, 
            aes(x = periodo, 
                y = doentes_saidos_var,
                colour=tipo_instituicao), 
                linewidth=1.15) + #nos geom de linha o argumento size também funciona para a grossura mas está a mudar para linewidth
  
  scale_color_manual(values = c("#fdb462", "#80b1d3", "#b3de69")) +
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "", 
         caption = "Source: Ministry of Health, Portugal",
       colour = "") +
  theme_minimal() +
  theme(legend.position="bottom",
        legend.title=element_blank(),
        plot.title = element_text(face = "bold", size = 12)
        )

p1

```

### Adicionar outros elementos

```{r}
# Lets change the position of the legend

p2<- ggplot() +
  geom_line(data= inpatient_hospital_sum, 
            aes(x = periodo, 
                y = doentes_saidos_var,
                colour=tipo_instituicao), 
                linewidth=1.15) +
  
  scale_color_manual(values = c("#fdb462", "#80b1d3", "#b3de69")) +
  
  geom_vline(xintercept=as.Date("2020-03-01"), 
             colour="red") + 
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "", 
         caption = "Source: Ministry of Health, Portugal",
       colour = "") +
  theme_minimal() +
  theme(legend.position="bottom",
        legend.title=element_blank(),
        plot.title = element_text(face = "bold", size = 12)
        )

p2
	
```

::: callout-note
Embora não seja necessário, existe um espaço entre o gráfico e os eixos. Para eliminar esse espaço podemos adicionarpo seguinte código:

coord_cartesian( expand = FALSE )
:::

## Area chart

```{r}
p1<-  ggplot( data = inpatient_hospital_year,
            aes(x = year, 
                y = doentes_saidos_var,
                fill=factor(tipo_instituicao, 
                levels = c("Hospital", "University", "Cancer hospital")))
            ) +
  geom_area(position="stack",alpha=0.6 , size=0.1, colour="black"
           ) +
  
  scale_y_continuous(labels = comma) +
  scale_fill_manual(values=c("#00BA38","#619CFF" ,"#F8766D")) +
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of hospital", 
         caption = "Source: Ministry of Health, Portugal",
         fill="") +
  theme_minimal() +
  theme(legend.position="bottom")

p1
```

## VISUALIZAR INCERTEZA

### Error Bars

```{r}

inpatient_hospital_year_mean <- inpatient_hospital_lite |>
  summarise(
    mean_saidos_var = mean(doentes_saidos_var, na.rm = TRUE), 
    sd_saidos_var = sd(doentes_saidos_var, na.rm = TRUE), 
    .by= c(year)
    )
  
    
```



```{r}
p3<- ggplot(data= inpatient_hospital_year_mean, 
            aes(x = year, 
                y = mean_saidos_var) 
            ) +
  
  geom_point()+
  
  geom_errorbar(aes(ymin=mean_saidos_var-sd_saidos_var, 
                    ymax=mean_saidos_var+sd_saidos_var), 
                width=.2,
                position=position_dodge(0.05)) +
  
  labs(title = "Mean and SD of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Mean Nunumber of inpatients discharged",
         x = "Year", 
         caption = "Source: Ministry of Health, Portugal") +
  
  theme_minimal()

p3

```
### Confidence intervals

```{r}

p1<- ggplot(inpatient_hospital_lite, 
       aes(x=dias_de_internamento_var, 
           y=doentes_saidos_var)) + 

  geom_smooth(method=loess, 
              se=TRUE,
              span = 0.1) +
  
    labs(title = "Number of inpatients discharged and length of stay",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Length of stay ", 
         caption = "Source: Ministry of Health, Portugal",
       colour="") +
  theme_minimal() +
  theme(legend.position="bottom")

p1

```




## STATISTICS IN PLOTS

```{r}
# Let's change the caracteristics of the box plot
# Change the colours and theme
# Dont show the NA in the plot

p1<- ggplot(data= inpatient_hospital_lite, 
            aes(x = tipo_instituicao, 
                y = doentes_saidos_var)
            ) +
  stat_summary(
    geom = "point",
    fun.y = "median",
    col = "black",
    size = 3,
    shape = 2,
    fill = "black") +
  
  geom_jitter(alpha=0.02,
              width = 0.3,
              colour = "gray") +
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of hospital", 
         caption = "Source: Ministry of Health, Portugal") +
  ylim(0, 4000)
  
  theme_minimal()
p1
```

```{r}
# Let's change the caracteristics of the box plot
# Change the colours and theme
# Dont show the NA in the plot

p1<- ggplot(data= inpatient_hospital_lite, 
            aes(x = tipo_instituicao, 
                y = doentes_saidos_var)
            ) +
        stat_summary(
    geom = "point",
    fun.y = "mean",
    col = "black",
    size = 3,
    shape = 3,
    fill = "blue") +
  ylim(0, 4000) +
  
  stat_summary(
    geom = "point",
    fun.y = "median",
    col = "black",
    size = 3,
    shape = 1,
    fill = "red") +
  

  
  geom_jitter(alpha=0.02,
              width = 0.2,
              colour = "gray") +
  
  labs(title = "Number of inpatients discharged in Hospitals",
         subtitle = "2015-2022",
         y = "Number of inpatients discharged",
         x = "Type of hospital", 
         caption = "Source: Ministry of Health, Portugal") +
  theme_minimal()
p1
```


## COMBINAR PLOTS

O pacote patchwork em R é uma biblioteca muito útil para combinar e organizar gráficos criados com ggplot2. Fornece uma forma intuitiva e flexível de dispor múltiplos gráficos em uma única janela gráfica. 

Ver mais aqui https://patchwork.data-imaginist.com/articles/patchwork.html

```{r}
p2 + p3
```

```{r}
p2 / p3
```


# DADOS ESPACIAIS 

## Tipos de dados espaciais 

**Dados de áreas**: Este tipo de dados representa o espaço geográfico através de pontos, linhas e polígonos. Polígonos são utilizados para áreas maiores como lagos, parques ou fronteiras de países.

**Dados Raster (grelha)**: São dados que representam o espaço geográfico como uma matriz de células ou pixels, com cada célula tendo um valor específico. Imagens de satélite e mapas de elevação são exemplos típicos de dados raster. 

**Dados localização (Point data)**: São dados que correspondem a uma localização especifica no espaço. p.e. localização de uma estação meteorologica. 

## Shapefiles 

Os dados espaciais são frequentemente representados através de um formato de armazenamento de dados denominado shapefile. 

Podemos encontrar shapefiles de diversas fontes, p.e. Ministério da Administração Interna, ao Eurostat, https://ec.europa.eu/eurostat/web/gisco/overview 


```{r}
library(giscoR)
```

```{r}
PT_res10 <-
  gisco_get_countries(resolution = "10", country = "PT") %>%
  mutate(res = "10M")
```

```{r}
ggplot(PT_res10) +
  geom_sf(fill = "blue") +
  theme_map()
```

```{r}
PT_nuts <- gisco_get_nuts(country = "Portugal", nuts_level = 2)

ggplot(PT_nuts) +
  geom_sf() +
  geom_sf_text(aes(label = NAME_LATN), size=3) +
  theme_map()
```

```{r}
target <- c("Região Autónoma dos Açores", "Região Autónoma da Madeira")

PT_nuts <- PT_nuts |> 
  filter(! NUTS_NAME %in% target)

ggplot(PT_nuts) +
  geom_sf() +
  geom_sf_text(aes(label = NAME_LATN), size=2) +
  theme_map()

```

### Dados (features) espaciais 

```{r}
# Use eurostat
library(eurostat)

# Que datasets estão disponiveis no Eurostat
health_datasets <- search_eurostat("health")
```


```{r}
# Download do dataset 	 Healthy life expectancy based on self-perceived health

healthy_life_expectancy <- get_eurostat("hlth_silc_17") |> filter(TIME_PERIOD=="2021-01-01", 
                                                                  sex=="T", 
                                                                  indic_he=="HE_BIRTH")
```


### Àreas 

```{r}
# Get shapes
nuts3 <- gisco_get_nuts(
  year = "2016",
  epsg = "3035",
  resolution = "3",
  nuts_level = "3"
)

# Group by NUTS by country and convert to lines
country_lines <- nuts3 %>%
  group_by(
    CNTR_CODE
  ) %>%
  summarise(n = n()) %>%
  st_cast("MULTILINESTRING")
```

```{r}
ggplot(nuts3) +
  geom_sf() +
  theme_map()
```


```{r}
ggplot(country_lines) +
  geom_sf() +
  theme_map()
```

#### Mapas 

Por vezes podemos carregar a shapefile e os dados e juntar os dados, desde que tenhamos um identificador comum

```{r}
library(sf)

comm_pt <- st_read(
  "datasets/map_json_portugal/concelhos_portugal_light.json")
```

```{r}

covid_inc <- read_csv("datasets/covid_inc.csv") 


covid_inc <- covid_inc |>
  rename(NAME_2=Concelho) |>
  mutate( NAME_2=recode(NAME_2,
                         'Ponte de Sor' = "Ponte de Sôr"
                         ))

## Erro frequente com Logoa, Calheta, Mealhada, Sátão


comm_pt <-left_join(comm_pt,
                     covid_inc,
                     by = "NAME_2")

sanity <-anti_join(comm_pt,
                     covid_inc,
                     by = "NAME_2")

```

We need to specify the fill variable and the color variable (boundaries)

```{r}

p1<- ggplot() + 
  geom_sf(data = comm_pt, 
          aes(fill = Incidencia_categoria),
              size = 1,
              color = "black"
          ) 

p1
```

We can chage the thickness of the boundaries and the color

```{r}
library(ggthemes)

p1<- ggplot() + 
  geom_sf(data = comm_pt, 
          aes(fill = Incidencia_categoria),
              size = 0.1,
              color = "white"
          ) 

p1
```

We now will add a theme and labels

```{r}
p <- ggplot() +
    geom_sf(data = comm_pt, 
          aes(fill = Incidencia_categoria),
              size = 0.1,
              color = "white"
          ) +
    # add a theme
   theme_classic() +
    labs(x = NULL, 
         y = NULL, 
         title = "Portugal's COVID-19 incidence", 
         subtitle = "January, 2022", 
         caption = "Data: DGS, 2022")
p


```

We can change the default specification

```{r}
theme_map <- function(...) {
  theme_minimal() +
  theme(
    axis.line = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    ...
  )
}
```

```{r}
p <- ggplot() +
    geom_sf(data = comm_pt, 
          aes(fill = Incidencia_categoria),
              size = 0.1,
              color = "white"
          ) +
    # add the theme
   theme_map() +
    labs(x = NULL, 
         y = NULL, 
         title = "Portugal's COVID-19 incidence", 
         subtitle = "January, 2022", 
         caption = "Data: DGS, 2022")
p


```

We can change the colors now

```{r}

# It's recommended to use a named vector
# Use this website https://colorbrewer2.org/#type=sequential&scheme=OrRd&n=5 

cols <- c("#fef0d9", "#fdcc8a", "#fc8d59", "#e34a33", "#b30000")

p <- ggplot() +
    geom_sf(data = comm_pt, 
          aes(fill = Incidencia_categoria),
              size = 0.1,
              color = "gray"
          ) +
    # add the previously defined basic theme
   theme_map() +
    labs(x = NULL, 
         y = NULL, 
         title = "Portugal's COVID-19 incidence", 
         subtitle = "January, 2022", 
         caption = "Data: DGS, 2022") +
    # and we use guide_legend instead of guide_colourbar
  scale_fill_manual(values = cols,
                    name = "Incidência") +
  theme(
    legend.position = "right",
       legend.direction = "vertical",
       legend.text = element_text(size = 8, colour = "gray50")
  )
        
        
p
```
#### Operações com shapefiles 

```{r}
comm_ars<- comm_pt |>
  group_by(ARS) |> 
  summarize(geometry = st_union(geometry)
            )
```

```{r}
p <- ggplot() +
      geom_sf(data = comm_pt, 
          aes(fill = Incidencia_categoria),
              size = 0.1,
              color = "gray"
          ) +
        geom_sf(data = comm_ars, 
              size = 0.1,
              color = "black",
              alpha = 0
          ) +
    # add the previously defined basic theme
   theme_map() +
    labs(x = NULL, 
         y = NULL, 
         title = "Portugal's COVID-19 incidence", 
         subtitle = "January, 2022", 
         caption = "Data: DGS, 2022") +
    # and we use guide_legend instead of guide_colourbar
  scale_fill_manual(values = cols,
                    name = "") +
  
  theme(legend.position = "right",
        legend.direction = "vertical",
        legend.text = element_text(size = 8, colour = "gray50")) 
p
```

### Raster data 

```{r}
library(geodata)
tavg_pt <- worldclim_country(country = "Portugal", var = "tavg",
                       path = tempdir())

#convert to data.frame
tavg_pt_df <-
  as.data.frame(d, xy = TRUE) 

```

```{r}

g_tmax_map <- ggplot(data = tavg_pt_df) +
    geom_raster(aes(x = x, y = y, 
                    fill = PRT_wc2.1_30s_tavg_1)) +

    theme_void() +
    theme(
      legend.position = "bottom"
    )  +
      scale_fill_viridis_c(name = "Temperatura Média") +
  labs(
    title = "Temperatura Média em Portugal",
    caption = "Source: Eurostat"
  ) 
g_tmax_map
```

### Dados de Localização

```{r}
comm_lvt<- comm_pt |>
  filter(ARS=="Lisboa e Vale do Tejo")  

geo_hospitals <-  read_csv("datasets/geo_location_hospitals.csv")
  
```

```{r}

p <- ggplot() +
        geom_sf(data = comm_lvt, 
              size = 0.2,
              color = "black",
              fill="gray",
              alpha = 0.3
          ) +
      geom_point(data = geo_hospitals, 
                 aes(x = long, 
                     y = lat), 
                 size = 2, 
        shape = 23, 
        fill = "red") +
  
  geom_sf_text(data = geo_hospitals,
                aes(x = long, 
                     y = lat,
                    label = Hospital)
                ) +
    # add the previously defined basic theme
   theme_map() +
    labs(x = NULL, 
         y = NULL, 
         title = "Portugal's Hospital location in Lisbon and Tagus Valey", 
         subtitle = "January, 2022", 
         caption = "Data: MoH, 2022") 
p
```

**Open Streep maps**
```{r}
library(osmdata)

```



Steps 1. Choose a shapefile 2. Chose the data you want to add to the shapefile 3. Linkage the data

```{r}
library(sf)

comm_pt <- st_read(
  "datasets/map_json_portugal/concelhos_portugal_light.json")
```

```{r}

covid_inc <- read_csv("datasets/covid_inc.csv") 


covid_inc <- covid_inc |>
  rename(NAME_2=Concelho) |>
  mutate( NAME_2=recode(NAME_2,
                         'Ponte de Sor' = "Ponte de Sôr"
                         ))

## Erro frequente com Logoa, Calheta, Mealhada, Sátão


comm_pt <-left_join(comm_pt,
                     covid_inc,
                     by = "NAME_2")

sanity <-anti_join(comm_pt,
                     covid_inc,
                     by = "NAME_2")

```

We need to specify the fill variable and the color variable (boundaries)

```{r}

p1<- ggplot() + 
  geom_sf(data = comm_pt, 
          aes(fill = Incidencia_categoria),
              size = 1,
              color = "black"
          ) 

p1
```

We can chage the thickness of the boundaries and the color

```{r}
library(ggthemes)

p1<- ggplot() + 
  geom_sf(data = comm_pt, 
          aes(fill = Incidencia_categoria),
              size = 0.1,
              color = "white"
          ) 

p1
```

We now will add a theme and labels

```{r}
p <- ggplot() +
    geom_sf(data = comm_pt, 
          aes(fill = Incidencia_categoria),
              size = 0.1,
              color = "white"
          ) +
    # add a theme
   theme_classic() +
    labs(x = NULL, 
         y = NULL, 
         title = "Portugal's COVID-19 incidence", 
         subtitle = "January, 2022", 
         caption = "Data: DGS, 2022")
p


```

We can change the default specification

```{r}
theme_map <- function(...) {
  theme_minimal() +
  theme(
    axis.line = element_blank(),
    axis.text.x = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    ...
  )
}
```

```{r}
p <- ggplot() +
    geom_sf(data = comm_pt, 
          aes(fill = Incidencia_categoria),
              size = 0.1,
              color = "white"
          ) +
    # add the theme
   theme_map() +
    labs(x = NULL, 
         y = NULL, 
         title = "Portugal's COVID-19 incidence", 
         subtitle = "January, 2022", 
         caption = "Data: DGS, 2022")
p


```

We can change the colors now

```{r}

# It's recommended to use a named vector
# Use this website https://colorbrewer2.org/#type=sequential&scheme=OrRd&n=5 

cols <- c("#fef0d9", "#fdcc8a", "#fc8d59", "#e34a33", "#b30000")

p <- ggplot() +
    geom_sf(data = comm_pt, 
          aes(fill = Incidencia_categoria),
              size = 0.1,
              color = "gray"
          ) +
    # add the previously defined basic theme
   theme_map() +
    labs(x = NULL, 
         y = NULL, 
         title = "Portugal's COVID-19 incidence", 
         subtitle = "January, 2022", 
         caption = "Data: DGS, 2022") +
    # and we use guide_legend instead of guide_colourbar
  scale_fill_manual(values = cols,
                    name = "Incidência") +
  theme(legend.position = "right",
        legend.direction = "vertical",
        legend.text = element_text(size = 8, colour = "gray50")) 
p
```

### Interactive maps 

```{r}
library(leaflet)
pal <- colorNumeric(palette = "YlOrRd", domain = comm_pt$Incidencia)

l <- leaflet(comm_pt) |>  addTiles() |> 
  addPolygons(color = "grey", fillColor = ~ pal(Incidencia),
              fillOpacity = 0.9) %>%
  addLegend(pal = pal, values = ~Incidencia, opacity = 0.9) |> 
  addMiniMap()
l
```




# EXTENÇÕES

[extensions of ggplot2](https://exts.ggplot2.tidyverse.org/gallery/)

https://dreamrs.github.io/esquisse/index.html 
# Adicional Resources

<https://www.cedricscherer.com/slides/useR-2021_ggplot-wizardry-extended.pdf>

# Exercicio 
Para os exercicios 6 e 7 deve utilizar o dataset hypoxia
```{r}
hypoxia <- read_csv("datasets/hypoxia.csv")
```



## Exercicio 6
1. Compara a distribuição de idades entre homens e mulheres
2. O gráfico deve ter um título, caption, legenda. A distribuição estar preenchido por cor "#91bfdb" e "#ef8a62". Utiliza o tema classic  


## Exercicio 7
1. Explora a relaçao entre MinSao2 e o BMI
2. O gráfico deve ter um título, caption, legenda. Usa o theme minimal e adiciona uma linha tendencia linear

## Exercicio 9
1. Cria um mapa usado o shapefile comm_pt, e as caracteristicas da base de dados "mortalidade_coracao_2021.csv"
2. O mapa deve conter a mortalidade por doenças cardiovasculares com uma escala de 5 cores 
3. O gráfico deve ter um título, caption, legenda.

# NOT WORKING 


#### Juntar datasets (Joins) 

```{r}

# Left join data
country_lines_sf <- country_lines %>%
  left_join(healthy_life_expectancy, by = c("CNTR_CODE" = "geo"))
```

```{r}
br <- c(0, 60, 70, 75, 80, 85)

country_lines_sf <- country_lines_sf %>%
  mutate(values_cut = cut(values, br, dig.lab = 5))

labs_plot <- prettyNum(br[-1], big.mark = ",")

# Palette
pal <- hcl.colors(length(br) - 1, "Lajolla")

```
```{r}
country_lines_sf <- country_lines_sf |> drop_na(values_cut)
```


```{r}
# Plot

ggplot(country_lines_sf) +
  geom_sf(aes(fill= values_cut), linewidth = 1.5,color="black") +
  #geom_sf(data = country_lines, col = "black", linewidth = 0.1) +
  # Center in Europe: EPSG 3035
  coord_sf(
    xlim = c(2377294, 7453440),
    ylim = c(1313597, 5628510)
  ) +
  labs(
    title = "Healthy life expectancy in 2021",
    subtitle = "",
    caption = "Source: Eurostat"
  ) 

+
  scale_fill_manual(
    name = "Healthy life expectancy",
    values = pal,
    labels = labs_plot,
    drop = FALSE,
    guide = guide_legend(
      direction = "horizontal",
      keyheight = 0.5,
      keywidth = 2.5,
      title.position = "top",
      title.hjust = 0.5,
      label.hjust = .5,
      nrow = 1,
      byrow = TRUE,
      reverse = FALSE,
      label.position = "bottom"
    )
  ) +
  theme_void() +
  # Theme
  theme(
    plot.title = element_text(
      size = 12, color = pal[length(pal) - 1],
      hjust = 0.5, vjust = -6
    ),
    plot.subtitle = element_text(
      size = 14,
      color = pal[length(pal) - 1],
      hjust = 0.5, vjust = -10, face = "bold"
    ),
    plot.caption = element_text(
      size = 9, color = "grey60",
      hjust = 0.5, vjust = 0,
      margin = margin(t = 5, b = 10)
    ),
    legend.text = element_text(
      size = 10,
      color = "grey20"
    ),
    legend.title = element_text(
      size = 11,
      color = "grey20"
    ),
    legend.position = "bottom"
  )

```

